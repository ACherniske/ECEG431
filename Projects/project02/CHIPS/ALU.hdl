// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //handle x input
    Mux16(a=x, b=false, sel=zx, out=xZeroed); //zero x if zx is 1
    Not16(in=xZeroed, out=xNegated); //negate x if nx is 1
    Mux16(a=xZeroed, b=xNegated, sel=nx, out=xProcessed); //final x value after zx and nx
    //handle y input
    Mux16(a=y, b=false, sel=zy, out=yZeroed); //zero y if zy is 1
    Not16(in=yZeroed, out=yNegated); //negate y if ny is 1
    Mux16(a=yZeroed, b=yNegated, sel=ny, out=yProcessed); //final y value after zy and ny
    //handle f input
    Add16(a=xProcessed, b=yProcessed, out=addResult); //x + y
    And16(a=xProcessed, b=yProcessed, out=andResult); //x & y
    Mux16(a=andResult, b=addResult, sel=f, out=funcOut); //choose between x + y and x & y based on f
    //handle no input
    Not16(in=funcOut, out=negatedFuncOut); //negate out if no is 1
    Mux16(a=funcOut, b=negatedFuncOut, sel=no, 
        out[0..7]=answerOutLeft, out[8..15]=answerOutRight, out[15]=answerOutLSB, 
        out=answerOut); //final out value after no
    //handle zr output
    Or8Way(in=answerOutLeft, out=orLeft); //or all bits of left half of out together
    Or8Way(in=answerOutRight, out=orRight); //or all bits of right half of out together
    Or(a=orLeft, b=orRight, out=orResult); //or the two halves together
    Not(in=orResult, out=zr); //if orResult is 0, then zr is 1
    //handle ng output
    And(a=answerOutLSB, b=true, out=ng); //ng is just the sign bit of out
    //final output
    Mux16(a=answerOut, b=false, sel=false, out=out); //final out value
}